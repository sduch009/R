library(quantmod)

### PURSUING FROM THE LAST EXAMPLE...###
read.csv("AAPL-Data.csv", row.names=1)
AAPL <- read.csv("AAPL-Data.csv", row.names=1)
AAPL

data <- AAPL

data
# HAVE WAY TOO MUCH DATA TO PLOT TOGETHER SO NOW:
plot(data) # TOO MUCH

Cl(data) # means give "Close" data points from "data"
plot(Cl(data), type='l') # means plot the 'close' points from 'data in 'line'-type graph
# HAVE TO BE REALLY CAREFUL FOR ADJUSTMENT FOR SHARE SPLITS AND DIVIDENDS BECAUSE DATASET NOT ALWAYS ADJUSTED
# NEVER USE CLOSE PRICES ALONE???
plot(Ad(data), type='l') #Ad means "Adjusted" USE ADJUSTED
data[,"Adjusted"] # is the same thing

#calculate simple returns of the data
length(Ad(data))
#what if we wanted total return between the period
100*((Ad(data)[2924] - Ad(data)[1])/ Ad(data)[1])
#what if we wanted return between the last half of period
100*((Ad(data)[2924] - Ad(data)[2924/2])/ Ad(data)[2924/2])

#Or if you want to calculate daily return of the adjusted close of data
dailyReturn(Ad(as.xts(data)), type='arithmetic')
#can also plot
plot(dailyReturn(Ad(as.xts(data)), type='arithmetic'), type='l')
#as.xts 
#to calculat cumulative product
plot(cumprod(1+dailyReturn(Ad(as.xts(data)), type='arithmetic')))

#calculating logreturns
plot(diff(log(Ad(data))), type='l')
#can do same thign for open or close...

#Calculate multiple logreturns at once
head(data[,c("Close","Adjusted")])
diff(log(data[,c("Close", "Adjusted")]))  # The diff of the log really doesnt make sense, doesnt know we want logret of close THEN of adj, the way to do this:

apply(data[,c("Close", "Adjusted")], 2, length) # use the apply function...gives length of both things,the "2" means were going to apply the argument ACROSS THE COLUMNS
apply(data[,c("Close", "Adjusted")], 2, log)  #give the LOG of each of the rows in the argument
apply(apply(data[,c("Close", "Adjusted")], 2, log), 2, diff) #LOGRETURNS: this does log of each columns then do the difference of these logs for each column
#logreturns ASSUMES IT IS CONTINUOUSLY COMPOUNDING (1 + simple returns)

#Compare Ad to close?
compareAdtoCl <- data.frame(apply(apply(data[,c("Close", "Adjusted")], 2, log), 2, diff)) #the comparison is now saved to a variable and made a df
compareAdtoCl
plot(compareAdtoCl[,1], type ='l') #plots first column
lines(compareAdtoCl[,2], type ='l', col="red") #plots 

compareAdtoClCumSum <- data.frame(apply(compareAdtoCl, 2, cumsum)) # compare adjusted to close Cumulative Sum
compareAdtoClCumSum
plot(compareAdtoClCumSum[,1], type='l') #starts at "zero' insteaf of stock price
lines(compareAdtoClCumSum[,2], type='l', col="red") #how you calculate cumulative sum returns, changed to a "2" to add the adjusted

plot(cumprod(1+dailyReturn(Ad(as.xts(data)), type="arithmetic"))) # difference between log and discrete (simple) returns
lines(cumsum(dailyReturn(Ad(as.xts(data)), type="log")), col="red") # Simple returns in black, log returns in red

#IN ORDER TO MAKE EASIER TO READ USE PERFORMANCE ANALYTICS
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics) #uses xts and zoo objects perfect for financial time series, helps keeps dates etc...
# eg
as.xts(compareAdtoCl) #looks the same but isnt
class(compareAdtoCl) # its a df
class(as.xts(compareAdtoCl)) # class "xts" "zoo"

data <- as.xts(compareAdtoCl)
data <- exp(data) -1 #if youve got logreturns yo do e to the simple returns minus 1
data
charts.PerformanceSummary(data, main="Compare Close to Adjusted Cumulative Discrete Return")
